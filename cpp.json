{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		
	// データ構造
	"unionfind": {
		"prefix": "unionfind",
		"body": [
			"struct UnionFind{",
				"\tvector<int> par;",
			
				"\n\tUnionFind(int n) : par(n,-1) { }",
				"\tvoid init(int n) { par.assign(n,-1); }",
			
				"\n\tint root(int x){",
					"\t\tif(par[x]<0) return x;",
					"\t\telse return par[x]=root(par[x]);",
				"\t}",

				"\n\tbool issame(int x,int y){",
					"\t\treturn root(x)==root(y);",
				"\t}",
			
				"\n\tbool merge(int x,int y){",
					"\t\tx=root(x);",
					"\t\ty=root(y);",
					"\t\tif(x==y) return false;",
					"\t\tif(par[x]>par[y]) swap(x,y);",
					"\t\tpar[x]+=par[y];",
					"\t\tpar[y]=x;",
					"\t\treturn true;",
				"\t}",

				"\n\tint size(int x){",
					"\t\treturn -par[root(x)];",
				"\t}",
			"};",
		],
		"description": "union_find"
	},

	// グラフ
	"bfs_grid": {
		"prefix": "bfs_grid",
		"body": [
			"// O(HW)",
			"int H,W;",
			"char maze[1010][1010];",
			"int d[1010][1010];",
			"int dx[4]={1,0,-1,0};",
			"int dy[4]={0,1,0,-1};",
			"void bfs(){",
			    "\tqueue<pair<int,int>> que;",
			    "\trep(i,H){",
			        "\t\trep(j,W){",
			            "\t\t\td[i][j]=INF;",
			        "\t\t}",
			    "\t}",
			    "\tque.push(make_pair(0,0)); // (0,0)スタート",
			    "\td[0][0]=0;",
			    "\twhile(!que.empty()){",
			        "\t\tpair<int,int> p=que.front();",
			        "\t\tque.pop();",
			        "\t\tfor(int i=0;i<4;i++){",
			            "\t\t\tint nx=p.first+dx[i];",
			            "\t\t\tint ny=p.second+dy[i];",
			            "\t\t\tif(0<=nx && nx<H && 0<=ny && ny<W && maze[nx][ny]!='#' && d[nx][ny]==INF){",
			                "\t\t\t\tque.push(make_pair(nx,ny));",
			                "\t\t\t\td[nx][ny]=d[p.first][p.second]+1;",
			            "\t\t\t}",
			        "\t\t}",
			    "\t}",
			"}",
		],
		"description": "bfs_grid"
	},

	"bfs_graph": {
		"prefix": "bfs_graph",
		"body": [
			"int n,m;",
    		"cin>>n>>m;",
    		"vector<vector<int>> G(n);",
    		"rep(i,m){",
    		    "\tint a,b;",
    		    "\tcin>>a>>b;",
    		    "\ta--,b--;",
    		    "\tG[a].push_back(b);",
    		    "\tG[b].push_back(a);",
    		"}",
    		"queue<int> q;",
    		"vector<int> d(n,INF); //d[i]:iまでの最短距離",
    		"d[0]=0; //0スタート",
    		"q.push(0);",
    		"while(!q.empty()){",
    		    "\tint v=q.front();",
    		    "\tq.pop();",
    		    "\tfor(auto nv : G[v]){",
    		        "\t\tif(d[nv]==INF){",
    		            "\t\t\td[nv]=d[v]+1;",
    		            "\t\t\tq.push(nv);",
    		        "\t\t}",
    		    "\t}",
    		"}",
		],
		"description": "bfs_graph"
	},

	"bipartite": {
		"prefix": "bipartite",
		"body": [
			"// 二部グラフ判定",
			"using Graph=vector<vector<int>>;",
			"vector<int> color;",
			"bool dfs(const Graph &G,int v,int cur=0){",
			    "\tcolor[v]=cur;",
			    "\tfor(auto next_v : G[v]){",
			        "\t\t//隣接頂点がすでに色確定していた場合",
			        "\t\tif(color[next_v]!=-1){",
			            "\t\t\tif(color[next_v]==cur) return false;",
			            "\t\t\tcontinue;",
			        "\t\t}",				
			        "\t\t//隣接頂点の色を変えて、再帰的に探索（1回でもfalseが変ええてきたらfalse）",
			        "\t\tif(!dfs(G,next_v,1-cur)) return false;",
			    "\t}",
			    "\treturn true;",
			"}",

			"\nint main(){",
			    "\t//頂点数と辺数",
			    "\tint N,M;",
			    "\tcin>>N>>M;",
			
			    "\n\t// グラフ入力受取",
			    "\tGraph G(N);",
			    "\tfor(int i=0;i<M;i++){",
			        "\t\tint a,b;",
			        "\t\tcin>>a>>b;",
			        "\t\tG[a].push_back(b);",
			        "\t\tG[b].push_back(a);",
			    "\t}",
			
			    "\n\t// 探索",
			    "\tcolor.assign(N,-1);",
			    "\tbool is_bipartite=true; // 二部グラフ判定フラグ",
			    "\tfor(int v=0;v<N;v++){",
			        "\t\tif(color[v]!=-1) continue; // vが探索済だったらスルー",
			        "\t\tif(!dfs(G,v)) is_bipartite=false;", 
			    "\t}",
			"}",
		],
		"description": "bipartite"
	},

	"dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"// ダイクストラ法",
			"// 参照：蟻本　p97",
			"// O(mlogn)",
			"struct edge{int to,cost;};",
			"typedef pair<int,int> P; // firstは最短距離、secondは頂点の番号",

			"\nint n; // 頂点の数",
			"vector<edge> G[100010];",
			"int d[100010];",

			"\nvoid dijkstra(int s){",
			    "\tpriority_queue<P,vector<P>, greater<P>> que;",
			    "\tfill(d,d+n,INF);",
			    "\td[s]=0;",
			    "\tque.push(P(0,s));",
			
			    "\n\twhile(!que.empty()){",
			        "\t\tP p=que.top(); que.pop();",
			        "\t\tint v=p.second;",
			        "\t\tif(d[v]<p.first) continue;",
			        "\t\trep(i,G[v].size()){",
			            "\t\t\tedge e=G[v][i];",
			            "\t\t\tif(d[e.to]>d[v]+e.cost){",
			                "\t\t\t\td[e.to]=d[v]+e.cost;",
			                "\t\t\t\tque.push(P(d[e.to],e.to));",
						"\t\t\t}",
					"\t\t}",
			    "\t}",
			"}",

			"\nint main(){",
				"\tcin >> n;",
				"\tint m; // 辺の数",
				"\tcin >> m;",
				"\tfor (int i=0; i<m; ++i) {",
					"\t\tint a, b, c;",
					"\t\tcin >> a >> b >> c;",
					"\t\ta--,b--;",
					"\t\tedge e = {b, c};",
					"\t\tG[a].push_back(e);",
				"\t}",
				"\tdijkstra(0); // 頂点0からの距離を求める",
			"}",
		],
		"description": "dijkstra"
	},

	"warshall-floyd": {
		"prefix": "warshall_floyd",
		"body": [
			"int N,M;",
			"cin>>N>>M;",
			"// Floyd-Warshall の初期化: dist[i][i] = 0 に注意",
			"int dist[N][N];",
			"rep(i,N){",
			"\trep(j,N){",
			"\t\tif(i!=j) dist[i][j]=INF;",
			"\t\telse dist[i][j]=0;",
			"\t}",
			"}",
			"\n// 入力と Floyd-Warshall",
			"rep(i,M){",
			"\tint a,b,c;",
			"\tcin>>a>>b>>c;",
			"\ta--,b--;",
			"\tdist[a][b]=c;",
			"\tdist[b][a]=c;",
			"}",
			"rep(k,N){",
			"\trep(i,N){",
			"\t\trep(j,N){",
			"\t\t\tdist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "warshall_floyd"
	},

	"kruskal": {
		"prefix": "kruskal",
		"body": [
			"// Kruskal法",
			"// O(ElogE)",
			"// Kruskal 法で使用する枝",
			"using pint = pair<int,int>;",
			"using Edge = pair<ll, pint>;",
			"vector<Edge> edges;",
			"//枝入力",
			"rep(i,M) {",
			"\tint u,v;",
			"\tll c;",
			"\tcin>>u>>v>>c;",
			"\tu--,v--;",
			"\tedges.push_back({c, pint(u, v)});",
			"}",
			"// Kruskal 法",
			"sort(all(edges));",
			"// unionfindのスニペット読み込んで",
			"UnionFind uf(N);",
			"ll res = 0;",
			"for (auto e : edges) {",
			"\tint u = e.second.first, v = e.second.second;",
			"\tll cost = e.first;",
			"\tif (uf.issame(u, v)) continue;",
			"\tuf.merge(u, v);",
			"\tres += cost;",
			"}",
			"cout << res << endl;",
		],
		"description": "kruskal"
	},

	"next_permutation": {
		"prefix": "next_permutation",
		"body": [
			"sort(v.begin(),v.end());",
			"do{",
			"\tfor(int i=0;i<N;i++){",
			"\t\tcout<<v[i]<<\" \";",
			"\t}",
			"\tcout<<endl;",
			"}while(next_permutation(v.begin(),v.end()));",
		],
		"description": "next_permutation"
	},


	// 整数
	"is_prime": {
		"prefix": "is_prime",
		"body": [
			"// 素数判定O(√n)",
			"bool is_prime(ll n){",
				"\tif(n==1) return false;",
				"\tfor(ll i=2;i*i<=n;i++){",
					"\t\tif(n%i==0) return false;",
				"\t}",
				"\treturn true;",    
			"}",
		],
		"description": "is_prime"
	},

	"enum_divisorsr": {
		"prefix": "enum_divisors",
		"body": [
			"// 約数の列挙O(√n)",
            "vector<ll> enum_divisors(ll n){",
				"\tvector<ll> res;",
				"\tfor(ll i=1;i*i<=n;i++){",
					"\t\tif(n%i==0){",
						"\t\t\tres.push_back(i);",
						"\t\t\t// 重複しないならばiの相方であるN/iもpush",
						"\t\t\tif(i!=n/i) res.push_back(n/i);",
					"\t\t}",
				"\t}",
				"\t// 小さい順に並び替える",
				"\tsort(res.begin(), res.end());",
				"\treturn res;",
			"}"
		],
		"description": "enum_divisors"
	},

	"prime_facorize": {
		"prefix": "prime_facorize",
		"body": [
			"// 素因数分解 O(√n)",
			"// たとえば 60 = 2^2 x 3 x 5 だったら {(2, 2), (3, 1), (5, 1)} を返す",
			"// 素因数の個数はlogn",
            "vector<pair<ll,ll>> prime_factorize(ll n){",
				"\tvector<pair<ll,ll>> res;",
				"\tfor(ll p=2;p*p<=n;p++){",
					"\t\tif(n%p!=0) continue;",
					"\t\tint num=0; // 指数",
					"\t\twhile(n%p==0){",
						"\t\t\tnum++;",
						"\t\t\tn/=p;",
					"\t\t}",
					"\t\tres.push_back({p,num});",
				"\t}",
				"\tif(n!=1) res.push_back({n,1});",
				"\treturn res;",
			"}",
		],
		"description": "prime_facorize"
	},

	"eratos": {
		"prefix": "eratos",
		"body": [
			"// エラトステネスのふるい",
			"int MAX=101010;",
			"vector<int> is_prime(MAX,1);",
			"is_prime[0]=0,is_prime[1]=0;",
			"for(int i=2;i<MAX;i++){",
				"\tif(!is_prime[i]) continue;",
				"\tfor(int j=i*2;j<MAX;j+=i) is_prime[j]=0;",
			"}",
		],
		"description": "eratos"
	},
	
	"gcd_lcm": {
		"prefix": "gcd_lcm",
		"body": [
			"// O(log(max(x,y)))",
			"ll gcd(ll x,ll y) {return y ? gcd(y,x%y) : x;}",
			"ll lcm(ll x, ll y) {return x/gcd(x,y)*y;}",
			"$1",
		],
		"description": "gcd_lcm"
	},

	"ll_to_basex": {
		"prefix": "ll_to_basex",
		"body": [
			"// n(10進数)をx進数で返す",
			"string ll_to_basex(ll n,ll x){",
				"\tif(n==0) return \"0\";",
				"\tstring res;",
				"\twhile(n>0){",
					"\t\tres=char(n%x+'0')+res;",
					"\t\tn/=x;",
				"\t}",
				"\treturn res;",
			"}",	
		],
		"description": "xshinhou"
	},

	"basex_to_ll": {
		"prefix": "basex_to_ll",
		"body": [
			"// n(x進数)を10進数で返す",
			"ll basex_to_ll(string n,ll x){",
    			"\tll res=0;",
    			"\trep(i,n.size()) res=res*x+int(n[i]-'0');",
    			"\treturn res;",
			"}",	
		],
		"description": "basex_to_ll"
	},

	// MOD
	"modpow": {
		"prefix": "modpow",
		"body": [
			"// a^n mod を計算する",
			"// O(logn)",
			"ll modpow(ll a, ll n, ll mod=MOD) {",
				"\ta%=mod;",
				"\tll res = 1;",
				"\twhile (n > 0) {",
					"\t\tif (n & 1) res = res * a % mod;",
					"\t\ta = a * a % mod;",
					"\t\tn >>= 1;",
				"\t}",
				"\treturn res;",
			"}",
		],
		"description": "modpow"
	},

	"ncr": {
		"prefix": "ncr",
		"body": [
			"// nCr mod を計算する O(n)",
			"const int MAX_N = 1000010;",
			"ll fac[MAX_N], finv[MAX_N], inv[MAX_N];",
			"// テーブルを作る前処理",
			"void COMinit() {",
				"\tfac[0] = fac[1] = 1;",
				"\tfinv[0] = finv[1] = 1;",
				"\tinv[1] = 1;",
				"\tfor (int i = 2; i < MAX_N; i++){",
					"\t\tfac[i] = fac[i - 1] * i % MOD;",
					"\t\tinv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;",
					"\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;",
				"\t}",
			"}",
			"// 二項係数計算",
			"long long COM(int n, int k){",
				"\tif (n < k) return 0;",
				"\tif (n < 0 || k < 0) return 0;",
				"\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
		],
		"description": "ncr"
	},

	"modinv": {
		"prefix": "modinv",
		"body": [
			"long long modinv(long long a, long long mod=MOD) {",
				"\treturn modpow(a, mod - 2, mod);",
			"}",
		],
		"description": "modinv"
	},

	"binary_search": {
		"prefix": "binary_search",
		"body": [
			"ll low=0,high=(1ll<<60);",
			"while(high-low>1){",
				"\tll med=(high+low)/2;",
				"\tif(ok(med)) low=med;",
				"\telse high=med;",
			"}",
			"cout<<low<<endl;",
		],
		"description": "binary_search"
	},

	"syakutori": {
		"prefix": "syakutori",
		"body": [
			"/* 合計値 */",
			"ll res = 0;",
			"/* 区間の左端 left で場合分け */",
			"int right = 0;     // 毎回 right を使い回すようにする",
			"ll sum = 0; // sum も使い回す",
			"rep(left,n) {",
				"\t/* sum に a[right] を加えても大丈夫なら right を動かす */",
				"\twhile (right < n && sum + a[right] <= k) {",
					"\t\tsum += a[right];",
					"\t\t++right;",
				"\t}",
				"\t/* break した状態で right は条件を満たす最大 */",
				"\tres += (right - left);",
				"\t/* left をインクリメントする準備 */",
				"\tif (right == left) ++right; // right が left に重なったら right も動かす",
			"\telse sum -= a[left]; // left のみがインクリメントされるので sum から a[left] を引く",
			"}",
			"cout << res << endl;",
		],
		"description": "syakutori"
	},

	"nCk": {
		"prefix": "nCk",
		"body": [
			"/*",  
				"\tパスカルの三角形による二項係数(nCk)の計算",
			    "\thttps://algo-logic.info/pascal-triangle/",
			    "\t前処理: O(MAX_N*MAX_N)",
			    "\tnCk(n,k): nCk の計算。O(1)",
			"*/",
			"const int MAX_N = 65;         // n の最大値",
			"vector<vector<long long>> com;  // 前計算の結果を保存",
			"// 動的計画法で前処理",
			"void init() {",
			    "\tcom.assign(MAX_N, vector<long long>(MAX_N));",
			    "\tcom[0][0] = 1;",
			    "\tfor (int i = 1; i < MAX_N; ++i) {",
			        "\t\tcom[i][0] = 1;",
			        "\t\tfor (int j = 1; j < MAX_N; j++) {",
			            "\t\t\tcom[i][j] = (com[i - 1][j - 1] + com[i - 1][j]);",
			        "\t\t}",
			    "\t}",
			"}",
			"// nCk を取得",
			"long long nCk(int n, int k) {",
			    "\treturn com[n][k];",
			"}",
			"int main() {",
			    "\tlong long n, k;",
			    "\tcin >> n >> k;",
			    "\tinit();",
			    "\tcout << nCk(n, k) << endl;",
			"}",
		],
		"description": "nCk"
	},
}